<!--
    Originally from the Wide framework:
    https://github.com/chandramouleswaran/Wide
    
    Used in Gemini with kind permission of the author.
    
    Original licence follows:
    
    Copyright (c) 2013 Chandramouleswaran Ravichandran
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock">

    <Geometry x:Key="Checkmark">
        M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z
    </Geometry>
    <Geometry x:Key="RightArrow">
        M 0,0 L 4,3.5 L 0,7 Z
    </Geometry>

    <!--  Shadow  -->
    <DropShadowEffect
        x:Key="StandardDropShadow"
        Direction="305"
        Opacity="0.6"
        ShadowDepth="3" />

    <SolidColorBrush x:Key="DisabledMenuItemBrush" Color="#FF9A9A9A" />

    <!--  Original style from http://www.jeff.wilcox.name/2010/05/zunelike-contextmenu-style/  -->
    <Style x:Key="MetroSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource MenuPopupDefaultSeparator}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition
                                Width="Auto"
                                MinWidth="25"
                                SharedSizeGroup="Icon" />
                            <ColumnDefinition Width="*" MinWidth="90" />
                            <ColumnDefinition
                                Width="Auto"
                                MinWidth="50"
                                SharedSizeGroup="Shortcut" />
                            <ColumnDefinition Width="Auto" MinWidth="13" />
                        </Grid.ColumnDefinitions>
                        <Border
                            Grid.Column="1"
                            Grid.ColumnSpan="3"
                            Height="1"
                            Margin="4,1,4,1"
                            Background="{TemplateBinding Background}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TopLevelHeader  -->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey}" TargetType="MenuItem">
        <Border
            Name="OuterBorder"
            BorderBrush="Transparent"
            BorderThickness="1,1,1,0"
            TextElement.Foreground="{DynamicResource MenuTopLevelHeaderDefaultText}">
            <Border
                Name="InnerBorder"
                BorderBrush="Transparent"
                BorderThickness="0,0,0,1">
                <Grid>
                    <ContentPresenter
                        Margin="6,3,6,3"
                        ContentSource="Header"
                        RecognizesAccessKey="True" />
                    <Popup
                        Name="Popup"
                        Margin="-10,-10,-10,-10"
                        AllowsTransparency="True"
                        Focusable="False"
                        HorizontalOffset="-1.1"
                        IsOpen="{TemplateBinding IsSubmenuOpen}"
                        Placement="Bottom"
                        PopupAnimation="Fade">
                        <Border
                            Name="SubmenuBorder"
                            Margin="0,0,8,8"
                            Background="{DynamicResource MenuPopupDefaultBackground}"
                            BorderBrush="{DynamicResource MenuPopupDefaultBorder}"
                            BorderThickness="1"
                            Effect="{DynamicResource StandardDropShadow}">
                            <StackPanel>
                                <!--  The illusion  -->
                                <Line
                                    Stroke="{DynamicResource MenuPopupDefaultBackground}"
                                    StrokeThickness="2"
                                    X1="0"
                                    X2="{Binding ActualWidth, ElementName=InnerBorder}"
                                    Y1="-1"
                                    Y2="-1" />
                                <Grid>
                                    <Border
                                        Width="27"
                                        HorizontalAlignment="Left"
                                        Background="{DynamicResource MenuPopupDefaultIconBackground}" />
                                    <StackPanel
                                        Margin="2"
                                        Grid.IsSharedSizeScope="True"
                                        IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Grid>
                            </StackPanel>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsSubmenuOpen" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource MenuTopLevelHeaderHoveredBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource MenuTopLevelHeaderHoveredBorder}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource MenuTopLevelHeaderHoveredBorder}" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource MenuTopLevelHeaderHoveredText}" />
            </MultiTrigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource MenuTopLevelHeaderPressedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource MenuTopLevelHeaderPressedBorder}" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource MenuTopLevelHeaderPressedText}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledMenuItemBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  TopLevelItem  -->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border">
            <Grid>
                <ContentPresenter
                    Margin="6,3,6,3"
                    ContentSource="Header"
                    RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuTopLevelHeaderHoveredBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledMenuItemBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  Submenu item template  -->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition
                        Width="Auto"
                        MinWidth="25"
                        SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" MinWidth="90" />
                    <ColumnDefinition
                        Width="Auto"
                        MinWidth="50"
                        SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="Auto" MinWidth="13" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" MinHeight="22" />
                </Grid.RowDefinitions>
                <Border
                    x:Name="IconContainer"
                    Grid.Column="0"
                    Padding="2,0,1,0"
                    Background="Transparent">
                    <Grid>
                        <Border
                            x:Name="Check"
                            Width="16"
                            Height="16"
                            Margin="3"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{DynamicResource MenuPopupDefaultCheckmarkBackground}"
                            BorderBrush="{DynamicResource MenuPopupDefaultCheckmark}"
                            BorderThickness="0"
                            Visibility="Collapsed">
                            <Path
                                x:Name="CheckMark"
                                Width="8"
                                Height="8"
                                Data="M 0 4 L 3 7 7 0"
                                SnapsToDevicePixels="False"
                                Stroke="{DynamicResource MenuPopupDefaultCheckmark}"
                                StrokeThickness="2" />
                        </Border>
                        <Border x:Name="IconBorder" BorderThickness="1">
                            <ContentPresenter
                                x:Name="Icon"
                                Width="16"
                                Height="16"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                ContentSource="Icon" />
                        </Border>
                    </Grid>
                </Border>
                <Border Grid.Column="1" Padding="6,2,0,2">
                    <ContentPresenter
                        x:Name="HeaderHost"
                        VerticalAlignment="Center"
                        ContentSource="Header"
                        RecognizesAccessKey="True" />
                </Border>
                <TextBlock
                    x:Name="InputGestureText"
                    Grid.Column="2"
                    Margin="6,0,0,0"
                    Padding="0,2,2,2"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Right"
                    Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconBorder" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="IconBorder" Property="BorderBrush" Value="{DynamicResource ToolbarButtonCheckedBorder}" />
                <Setter TargetName="IconBorder" Property="Background" Value="{DynamicResource MenuPopupHoveredItemBackground}" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuPopupHoveredItemBackground}" />
                <Setter TargetName="IconContainer" Property="Background" Value="{DynamicResource MenuPopupHoveredItemBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledMenuItemBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  Submenu Header template  -->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition
                        Width="Auto"
                        MinWidth="25"
                        SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" MinWidth="90" />
                    <ColumnDefinition
                        Width="Auto"
                        MinWidth="50"
                        SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="Auto" MinWidth="13" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto " MinHeight="24" />
                </Grid.RowDefinitions>
                <Border
                    x:Name="IconContainer"
                    Grid.Column="0"
                    Padding="5,3,4,3"
                    Background="Transparent">
                    <Grid>
                        <ContentPresenter
                            x:Name="Icon"
                            Width="16"
                            Height="16"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            ContentSource="Icon" />
                    </Grid>
                </Border>
                <Border Grid.Column="1" Padding="6,2,0,2">
                    <ContentPresenter
                        x:Name="HeaderHost"
                        VerticalAlignment="Center"
                        ContentSource="Header"
                        RecognizesAccessKey="True" />
                </Border>
                <TextBlock
                    x:Name="InputGestureText"
                    Grid.Column="2"
                    Margin="6,0,0,0"
                    Padding="0,2,2,2"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Right"
                    Text="{TemplateBinding InputGestureText}" />
                <Path
                    x:Name="ArrowPath"
                    Grid.Column="3"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Data="{StaticResource RightArrow}"
                    Fill="{DynamicResource MenuPopupDefaultArrow}" />
                <Popup
                    Name="Popup"
                    AllowsTransparency="True"
                    Focusable="False"
                    HorizontalOffset="-2"
                    IsOpen="{TemplateBinding IsSubmenuOpen}"
                    Opacity="0"
                    Placement="Right"
                    PopupAnimation="Fade">
                    <Border
                        Name="SubmenuBorder"
                        Margin="0,0,8,8"
                        Background="{DynamicResource MenuPopupDefaultBackground}"
                        BorderBrush="{DynamicResource MenuPopupDefaultBorder}"
                        BorderThickness="1"
                        Effect="{DynamicResource StandardDropShadow}"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Border
                                Width="27"
                                HorizontalAlignment="Left"
                                Background="{DynamicResource MenuPopupDefaultIconBackground}" />
                            <StackPanel
                                Grid.IsSharedSizeScope="True"
                                IsItemsHost="True"
                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Grid>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuPopupHoveredItemBackground}" />
                <Setter TargetName="ArrowPath" Property="Fill" Value="{DynamicResource MenuPopupHoveredArrow}" />
                <Setter TargetName="IconContainer" Property="Background" Value="{DynamicResource MenuPopupHoveredItemBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledMenuItemBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  MenuItem Style  -->
    <Style x:Key="MetroMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="8,2,10,2" />
        <Setter Property="Template" Value="{StaticResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey}}" />
        <Style.Resources>
            <!--  Disabled all images placed inside a button - most common scenario  -->
            <Style TargetType="Image">
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.5" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="Path">
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.5" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="7,2,8,3" />
                <Setter Property="Template" Value="{StaticResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="7,2,8,3" />
                <Setter Property="Template" Value="{StaticResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="2,3,2,3" />
                <Setter Property="Template" Value="{StaticResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="2,3,2,3" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MetroContextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource MenuPopupDefaultBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource EnvironmentWindowText}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource MenuPopupDefaultBorder}" />
        <Setter Property="Padding" Value="0,2,0,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border
                        x:Name="Menu"
                        Margin="2"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="0"
                        Effect="{DynamicResource StandardDropShadow}"
                        Opacity="0">
                        <Border.Triggers>
                            <EventTrigger RoutedEvent="Rectangle.Loaded">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="Menu"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Border.Triggers>
                        <Grid>
                            <ItemsPresenter Margin="{TemplateBinding Padding}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StandardMenu" TargetType="Menu">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Menu">
                    <Border
                        Background="{DynamicResource MenuDefaultBackground}"
                        BorderBrush="{DynamicResource MenuDefaultBackground}"
                        BorderThickness="1">
                        <WrapPanel
                            ClipToBounds="True"
                            IsItemsHost="True"
                            Orientation="Horizontal" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Set default styles  -->
    <Style BasedOn="{StaticResource MetroSeparator}" TargetType="Separator" />
    <Style BasedOn="{StaticResource MetroMenuItem}" TargetType="MenuItem">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style BasedOn="{StaticResource StandardMenu}" TargetType="Menu" />
    <Style BasedOn="{StaticResource MetroContextMenu}" TargetType="ContextMenu" />
    <Style BasedOn="{StaticResource MetroContextMenu}" TargetType="ContextMenuEx" />
    <Style BasedOn="{StaticResource MetroMenuItem}" TargetType="MenuItemEx">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
</ResourceDictionary>
